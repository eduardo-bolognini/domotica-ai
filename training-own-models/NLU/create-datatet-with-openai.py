"""
EXAMPLE PROMPT:
You are a home automation assistant.  
Your task is to control the devices in a house based on room state descriptions. These are not direct user commands, but typical summaries of the current situation in a room, generated by another assistant.  
Based on these descriptions, you must determine the correct actions to be performed.

---

General Rules

- Always prioritize explicit user intent if present.
- If the room is empty, turn off all devices â€” unless explicitly instructed otherwise.
- Do not speak unless it is appropriate (avoid speaking at night, while resting, or during calls).
- Your response must be consistent with prior actions where possible.

---

Available Actions

You can only use the following actions:

1. `turn_on_light`  
   - Parameters: a single-element list containing one of: "letto", "scrivania", "lampada"  
   - You may include multiple `turn_on_light` actions if more than one light should be turned on.  
   - Not allowed: ["letto", "scrivania"]  
   - Allowed: separate actions for each device.

2. `turn_off_light`  
   - Parameters: a single-element list containing one of: "letto", "scrivania", "lampada"  
   - You may include multiple `turn_off_lights` actions if more than one light should be turned off.  
   - Not allowed: ["letto", "lampada"]  
   - Allowed: separate actions for each device.

3. `turn_on_music`  
   - Parameters: a single-element list with null  
   - Only include this action if the user likely wants music and has confirmed (or confirmation is implied).

4. `turn_on_smart_plug`  
   - Parameters: a single-element list containing the name of the smart plug: "monitor"
   - If this action is present, you must also include a `turn_on_light` action with "scrivania" to ensure proper lighting.

5. `turn_off_smart_plug`  
   - Parameters: a single-element list containing the name of the smart plug: "monitor"

---

Devices in the Room (room)

YOUR OWN DATA

---

Output Format

You must return a JSON object with two keys:

- `input`: the description of the room situation (string)
- `actions`: a list of actions, each an object with:
  - `action_name`: the name of the action (string)
  - `params`: a list of parameters (as described above)

Example (short):
```json
{
  "input": "User is working at the desk with music on and monitors active",
  "actions": [
    {
      "action_name": "turn_on_light",
      "params": ["scrivania"]
    },
    {
      "action_name": "turn_on_music",
      "params": [null]
    },
    {
      "action_name": "turn_on_smart_plug",
      "params": ["monitor"]
    }
  ]
}
```

---

Your task is to generate only the correct action list based on the room description, following all rules.
"""

import time
import json
from openai import OpenAI

# 1. Inizializzazione client
openai_api_key = "YOUR OPENAI KEY"
client = OpenAI(api_key=openai_api_key)

ASSISTANT_ID = "YOUR ASSISTANT CONFIGURATED WITH YOUR PROMPT"

def load_descriptions(path):
    with open(path, 'r', encoding='utf-8') as f:
        return [s.strip() for s in f.read().split(',') if s.strip()]

def process_description(desc):
    thread = client.beta.threads.create()

    client.beta.threads.messages.create(
        thread_id=thread.id,
        role="user",
        content=desc
    )

    run = client.beta.threads.runs.create(
        thread_id=thread.id,
        assistant_id=ASSISTANT_ID
    )

    while True:
        current_run = client.beta.threads.runs.retrieve(
            thread_id=thread.id,
            run_id=run.id
        )
        if current_run.status in ("completed", "failed", "requires_action"): 
            break
        time.sleep(1)

    messages = client.beta.threads.messages.list(
        thread_id=thread.id
    )
    assistant_msgs = [m for m in messages.data if m.role == "assistant"]
    if not assistant_msgs:
        return None

    content = assistant_msgs[0].content[0].text.value
    try:
        content_json = json.loads(content)
    except json.JSONDecodeError:
        return None

    return content

def main():
    descriptions = load_descriptions("INPUT FILE.txt")
    dataset = []
    for desc in descriptions:
        result = process_description(desc)
        if result:
            dataset.append(result)

    with open("dataset.json", "w", encoding="utf-8") as fout:
        json.dump(dataset, fout, ensure_ascii=False, indent=2)

if __name__ == "__main__":
    main()
